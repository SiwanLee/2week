2주차 Notepad

1. 변수의 이해

 - char(1byte) => 문자형 저장은 배열을 이용
  - wchar_t -> 영어를 제외한 각 나라의 언어를 표시하기 위한 유니코드

 - int(4byte) => 정수형에서 컴퓨터가 가장 빠르게 연산하는 데이터 형

 - short(2byte)

 - double(8byte)

 - float(4byte) 

 - long(4byte)

 - bool(1byte) => 논리형 데이터(true / False)
                

 * 이름뒤에 괄호()가 붙으면 함수 *

2. sizeof : 데이터들의 크기를 알려주는 연산자 / 지정된 데이터의 크기를 반환한다.
             (구조체형식의 데이터 형 자체를 sizeof 연산자를 이용해 크기를 알 수 있음)

3. 실수형 데이터 타입 사용과 표현

 - float 형 변수의 값 뒤에 왜 f가 붙을까?
   => 실수 뒤에 f가 붙어 있지 않으면 double 타입에 상응하는 실수 값이라고 생각!

4. bool 타입
 - bool 타입은 변수의 값이 1이 아닌 모든 값은 false로 인식 / 1은 true와 같은 

5. 형변환(Casting, 캐스팅)

 1) 실수형 -> 정수형 : 소숫점 이하 값은 손실 되는것을 볼 수 있다.

 - 조건문(if문) => 딱 한번만 조건을 판단하여 명령의 실행 여부를 결정함

1) if-else 조건문
   => if문은 조건이 만족할 떄 특정 명령을 실행하는 반면에 else문은 조건이 만족되지 않을 떄의 동작도 같이 지정한다.
        (애초에 if문을 작성할떄 {}를 붙일 것!)

2) if-else if-else
    => 여러개의 조건에 대해 만족하는 명령 하나를 선택할 떄 사용한다.
        (else if문을 계속 이어서 사용하면 다수의 조건들 중 하나를 선택할 수 있지만, 가독성이 떨어짐)

 - 조건문(for문) => 제어변수를 사용한다는 점이 가장 큰 특징

1) 초기식 : 반복문은 보통 특정 변수가 일정한 범위에 있는 동안에 실행된다. 반복문을 통제하는 변수를 제어 변수라고 한다.
               초기식은 제어변수의 초기값을 지정하며, 루프가 시작될 떄 한번만 수행한다.

2) 조건식 : 반복문이 언제까지 실행될 것인가를 지정하며, 이 조건이 참인동안 계속 루프를 돈다.
               조건이 거짓이 되면 루프를 탈출한다. 제어변수에 대한 비교 연산문이 온다.

3) 증감식 : 한 번 루프를 돌 떄 제어 변수를 얼마나 증감시킬 것인가를 지정한다. 
               제어 변수의 값을 변화시키는 연산문이 온다.

4) 명령 : 반복 실행될 명령이다.

5) 무한루프 : 반복 회수가 가변적인 루프를 의미
                 형식상 무한히 반복되도록 해 놓고 루프 내부에서 끝낼 시점을 결정하도록 하는 루프
                 루프를 탈출할 때는 Break문을 사용 => 조건식을 무시하고 강제로 종료하는 명령

6) 다중루프 : 두 개 이상의 루프가 겹쳐 있는 제어 구조

 - 반복문(while문) => 조건이 만족하는동안 명령을 계속 실행함.
   (ex. while(조건) 명령;)

 - while문으로도 while(TRUE) 명령; 형식으로 무한 루프를 만들 수 있음
   (조건이 TRUE로 고정되어 있으므로 while의 조건은 항상 참이 되어 명령을 무한히 반복 => 루프를 탈출할떄는 break하는 문장이 포함되어야 한다.
   -> 루프로 들어가기 전에 조건을 점검한다.

 - do 명령; while(조건); => 조건이 만족하는 동안 반복적으로 실행함.(repeat until 제어문과 동일)
   -> 일단 명령을 실행한 후 루프 계속 여부를 점검한다.

 - 다중선택 Switch문 => switch문 다음의 괄호안에 평가할 변수를 적고 case문에 이 변수가 가질 수 있는 값과 이 값에 대한 처리 코드를 작성한다.
                                 case를 끝낼 때는 break문으로 switch 블록을 강제로 탈출해야 한다.

  - switch문으로 평가할 수 있는 변수는 주로 정수형이다.(int, unsigned, short)
   (문자형, 열거형등은 정수형과 호환되므로 switch문에 사용할 수 있음)
   (ex. switch(ch){
        case 'a':
        case 'A'
        break;
        }
)

 - goto문 : 지정한 곳으로 무조건 점프하는 제어문 => 프로그램의 구조를 엉키게 만들 가능성이 있음.
   (ex. here:
        ..........
        ..........
        goto here;)

 - continue문 : 루프의 나머지 부분을 무시하고 조건 점검부로 점프하여 루프의 다음 값을 실행하도록 하는 명령
                    루프의 범위 중 특정 조건의 값은 반복 대상에서 제외시키고자 할 떄 사용

  /주의사항/ => break는 반복문이나 switch문의 case내에서 사용할 수 있다. 이에 비해 countinue는 반복문 내에서만 사용할 수 있으며, switch문에서는 사용할 수 없다.

